// 用于编辑器辅助工具材质定义
Def HelperMaterialDef{
    Params{
        vec4 color;
        sampler2D colorMap;
        float alphaDiscard;
    }
    SubTechnology ScalePass{
        Vars{
            vec4 wordPosition;
        }
        Vs_Shader{
            void main(){
                //Context.OutPosition = Context.ProjectViewModelMatrix * vec4(Context.InPosition, 1.0f);
                mat4 scaleMat4 = mat4(
                    0.2f, 0.0f, 0.0f, 0.0f,
                    0.0f, 0.2f, 0.0f, 0.0f,
                    0.0f, 0.0f, 0.2f, 0.0f,
                    0.0f, 0.0f, 0.0f, 1.0f
                );
                Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                wordPosition = Context.OutPosition;
            }
        }
        Fs_Shader{
            void main(){
                // 使用自定义颜色输出
                #ifdef Params.color
                    Context.OutColor = Params.color;
                #else
                    // 使用纹理
                    #ifdef Params.colorMap
                        Context.OutColor = texture(Params.colorMap, Context.InUv0);
                        #ifdef Params.alphaDiscard
                            if(Context.OutColor.a < Params.alphaDiscard){
                                discard;
                            }
                        #endif
                    #else
                        Context.OutColor = vec4(1.0f, 1.0f, 0.0f, 1.0f);
                    #endif
                #endif
                vec4 wPosition = wordPosition;
            }
        }
    }
    SubTechnology ColorPass{
        Vars{
            vec4 wordPosition;
            vec2 uv0;
        }
        Vs_Shader{
            void main(){
                //Context.OutPosition = Context.ProjectViewModelMatrix * vec4(Context.InPosition, 1.0f);
                Context.OutPosition = Context.ProjectMatrix * Context.ViewMatrix * Context.ModelMatrix * vec4(Context.InPosition, 1.0f);
                wordPosition = Context.OutPosition;
                uv0 = Context.InUv0;
            }
        }
        Fs_Shader{
            void main(){
                // 使用自定义颜色输出
                #ifdef Params.color
                    Context.OutColor = Params.color;
                #else
                    // 使用纹理
                    #ifdef Params.colorMap
                        Context.OutColor = texture(Params.colorMap, uv0);
                        #ifdef Params.alphaDiscard
                            if(Context.OutColor.a < Params.alphaDiscard){
                                discard;
                            }
                        #endif
                    #else
                        Context.OutColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);
                    #endif
                #endif
            }
        }
    }
    Technology{
        Sub_Pass{
            Pass ColorPass{
            }
        }
    }
}
